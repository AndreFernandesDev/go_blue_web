// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: users.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const checkUserExists = `-- name: CheckUserExists :one
SELECT EXISTS(SELECT true FROM users WHERE id = $1)
`

func (q *Queries) CheckUserExists(ctx context.Context, id uuid.UUID) (bool, error) {
	row := q.db.QueryRowContext(ctx, checkUserExists, id)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const getUser = `-- name: GetUser :one
SELECT id, created_at, updated_at, username, firstname, lastname, email, password, avatar_url FROM users WHERE id = $1
`

func (q *Queries) GetUser(ctx context.Context, id uuid.UUID) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Username,
		&i.Firstname,
		&i.Lastname,
		&i.Email,
		&i.Password,
		&i.AvatarUrl,
	)
	return i, err
}

const setUser = `-- name: SetUser :one
INSERT INTO users(id, created_at, updated_at, username, firstname, lastname, email, password, avatar_url)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9)
RETURNING id, created_at, updated_at, username, firstname, lastname, email, password, avatar_url
`

type SetUserParams struct {
	ID        uuid.UUID
	CreatedAt time.Time
	UpdatedAt time.Time
	Username  string
	Firstname string
	Lastname  string
	Email     string
	Password  string
	AvatarUrl string
}

func (q *Queries) SetUser(ctx context.Context, arg SetUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, setUser,
		arg.ID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.Username,
		arg.Firstname,
		arg.Lastname,
		arg.Email,
		arg.Password,
		arg.AvatarUrl,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Username,
		&i.Firstname,
		&i.Lastname,
		&i.Email,
		&i.Password,
		&i.AvatarUrl,
	)
	return i, err
}
