// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: accounts.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const getAccount = `-- name: GetAccount :one
SELECT id, user_id, created_at, updated_at, provider, provider_id, access_token, refresh_token, expires_at FROM accounts WHERE provider_id = $1
`

func (q *Queries) GetAccount(ctx context.Context, providerID string) (Account, error) {
	row := q.db.QueryRowContext(ctx, getAccount, providerID)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Provider,
		&i.ProviderID,
		&i.AccessToken,
		&i.RefreshToken,
		&i.ExpiresAt,
	)
	return i, err
}

const setAccount = `-- name: SetAccount :one
INSERT INTO accounts(id, user_id, created_at, updated_at, provider, provider_id, access_token, refresh_token, expires_at)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9)
RETURNING id, user_id, created_at, updated_at, provider, provider_id, access_token, refresh_token, expires_at
`

type SetAccountParams struct {
	ID           uuid.UUID
	UserID       uuid.UUID
	CreatedAt    time.Time
	UpdatedAt    time.Time
	Provider     string
	ProviderID   string
	AccessToken  string
	RefreshToken string
	ExpiresAt    time.Time
}

func (q *Queries) SetAccount(ctx context.Context, arg SetAccountParams) (Account, error) {
	row := q.db.QueryRowContext(ctx, setAccount,
		arg.ID,
		arg.UserID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.Provider,
		arg.ProviderID,
		arg.AccessToken,
		arg.RefreshToken,
		arg.ExpiresAt,
	)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Provider,
		&i.ProviderID,
		&i.AccessToken,
		&i.RefreshToken,
		&i.ExpiresAt,
	)
	return i, err
}
